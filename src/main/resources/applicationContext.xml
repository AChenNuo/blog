<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/p http://www.springframework.org/schema/p/spring-p-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="jdbc:mysql://localhost:3306/db_blog?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="blog"/>
        <property name="password" value="blog"/>
        <!--<property name="driver" value="com.mysql.jdbc.Driver"/>-->
    </bean>

    <!--配置mybatis的sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--自动扫描mapper.xml文件-->
        <property name="mapperLocations" value="classpath*:com/blog/mappers/*.xml"/>
        <!--mybatis配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!--DAO接口所在包名，Spring会自动扫描这个包下面的类,猪儿侧这个bean的时候，顺便把dao包下面的所有接口都注册成bean了，所以dao的接口那边不需要写注解@Repository了再进行注册成bean了-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.blog.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--spring的事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--shiro相关配置-->
    <!--自定义Realm-安全数据源类似于DataSource-->
    <bean id="myRealm" class="com.blog.realm.MyRealm">
    </bean>
    <!--shiro的安全管理器，包括登录和权限验证，我们这里不需要考虑权限-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>
    <!--shiro过滤器-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--shiro的核心安全接口，这个属性是必须的，用于过滤的。-->
        <property name="securityManager" ref="securityManager"/>
        <!--身份认证失败，跳转到login.jsp页面（跳转到登录页面的配置）-->
        <property name="loginUrl" value="/login.jsp"/>
        <property name="filterChainDefinitions">
            <!--过滤规则，/login目录下的不需要验证，/admin目录下的需要验证-->
            <value>
                /login=anon
                /admin/**=authc
            </value>
        </property>
    </bean>
    <!--保证实现了shiro内部lifecycle函数的bean执行-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor">
    </bean>
    <!--开启shiro注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <!--添加安全管理-->
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--配置事务通知属性,也就是增强的逻辑-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--定义事务传播属性-->
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="new*" propagation="REQUIRED"/>
            <tx:method name="set*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="change*" propagation="REQUIRED"/>
            <tx:method name="check*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--配置事务切面-->
    <aop:config>
        <!--配置切点，也就是哪些方法即将进行增强-->
        <aop:pointcut id="serviceOperation" expression="execution(* com.blog.service.*.*(..))"/>
        <!--配置通知，也就是哪些方法是增强逻辑，也就是具体怎么增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
        <!--配置切面，也就是建立切点和通知的联系，也就是增强逻辑用在哪些需要进行增强的方法上-->
    </aop:config>

    <!--自动扫描service包，这个代表指定了可以使用注解的包，但是如果不配置启动注解驱动driver，是仅仅执行扫描，是不会真正的识别service等注解所对应的类的
    通俗的说，就是下面这个包可以使用注解（使用之后没有扫描功能，是扫不到service、controller等注解的），如果开启注解驱动的话，就可以在该包下扫描到注解了并且实现对应功能。
    或者说，可以扫描该包下的注解，但是注解并不起作用，必须开启注解驱动注解才会起作用-->
    <context:component-scan base-package="com.blog.service"/>


</beans>
<!--首先整体是包含在beans下面的，所以先写beans的命名空间 xmlns="http://www.springframework.org/schema/beans"-->
<!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" &#45;&#45;xml遵循的标签规范-->